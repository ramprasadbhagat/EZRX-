trigger:
  tags:
    include:
    - test.uat.*

parameters:
  - name: region
    type: string 
    displayName: Region (Select Region You Want To Test)
    default:
    values:
      - my
      - id
      - sg
      - ph
      - tw
      - vn
      - mm
      - th
      - kh

  - name: client_user_order
    type: boolean
    default: false
  - name: client_user_payment
    type: boolean
    default: false
  - name: client_user_return
    type: boolean
    default: false
  - name: external_sales_rep_user_order
    type: boolean
    default: false   
  - name: external_sales_rep_user_return
    type: boolean
    default: false  


  - name: max_test_time 
    displayName: Max Test Time
    type: string
    default: 10000
    values:
      - 10000
      - 3000
      - 1500
      - 1000 
      - 500
      - 300      
       
  - name: device_name 
    type: string 
    displayName: Test Device
    default: 'Google Pixel 8 Pro-14.0'
    values:
      - 'Google Pixel 8 Pro-14.0'
      - 'Google Pixel 6-12.0'
      - 'Samsung Galaxy S23-13.0'
      - 'Samsung Galaxy S21 Plus-11.0'
      - 'OnePlus 9-11.0'   
      
pool:   
  name: dnd-azdevops-flutter33

resources:
- repo: self

variables:
  - group: "eZRx Cred"
  - group: "eZRx plus CICD"

stages:
- stage: PublishNotificationTemplate
  displayName: Publish Notification Template
  jobs: 
  - job: 
    displayName: Upload Push Notification Template
    steps:
    - task: AzureCLI@2
      displayName: Update PushNotification Template
      inputs:
        azureSubscription: 'devops-dd-sc'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage blob upload --connection-string $AZURE_STORAGE_CONNECTION_STRING --container-name devops-operations --overwrite --file $(System.DefaultWorkingDirectory)/.azure-pipelines/template.html --name ezrxplus-mobile-msteams/template$(Build.BuildId)
      env: 
        AZURE_STORAGE_CONNECTION_STRING: '$(AZURE_STORAGE_CONNECTION_STRING)'

- stage: BuildApplication 
  displayName: Build Application 
  jobs: 
  - job: BuildApplication
    displayName: Build Application 
    steps:  
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            ./integration_test/${{ parameters.region }}/reset_sales_org_config.sh
        displayName: Preset Sales Org Configs For ${{ parameters.region }}

      - task: DownloadSecureFile@1
        name: localprop
        displayName: Download local properties file
        inputs:
          secureFile: 'local.properties'

      - task: DownloadSecureFile@1
        name: keyprop
        displayName: Download key properties file
        inputs:
          secureFile: 'key.properties'

      - task: DownloadSecureFile@1
        name: key
        displayName: Download signing key
        inputs:
          secureFile: 'ezrxplusuat.jks'

      - task: Bash@3
        displayName: Copy config files
        inputs:
          targetType: 'inline'
          script: |
            cp $(localprop.secureFilePath) $(Build.SourcesDirectory)/android/local.properties
            cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
            cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/ezrxkey.jks
          
            echo "local.properties copied to $(Build.SourcesDirectory)/android/local.properties"
            echo "key.properties copied to $(Build.SourcesDirectory)/android/key.properties"
            echo "key.jks copied to $(Build.SourcesDirectory)/android/app/ezrxkey.jks"  

      - task: Bash@3
        inputs: 
          targetType: 'inline' 
          script: | 
            pushd android	
            source /etc/profile.d/gradle.sh 
            flutter pub get 
            gradle wrapper
            ./gradlew app:assembleUatDebugAndroidTest
            build_status=$(echo $?)
            if [ "$build_status" == 0 ]
            then
              echo "Build Done"
            else
              echo "Some Build Failed."
              exit 1
            fi            
            popd
          
        displayName: Build Application      

      - task: PublishBuildArtifacts@1
        displayName: Publish build android test suits artifacts
        inputs: 
          pathToPublish: '$(System.DefaultWorkingDirectory)/build/app/outputs/apk/androidTest/uat/debug/app-uat-debug-androidTest.apk'
          artifactName: androidTestFile

- stage: AndroidUATRegressionJob
  dependsOn: [BuildApplication]
  displayName: Android UAT Regression Job
  jobs:
  - ${{ each testFile in parameters }}: 
      - job: RunIntegrationTest${{ testFile.Key }}
        condition: and(succeeded(), eq('${{ testFile.Value }}', true))
        timeoutInMinutes: 90 
        cancelTimeoutInMinutes: 5
        displayName: ${{ testFile.Key }}
        pool:   
          name: dnd-azdevops-flutter33 
        steps:

        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            artifactName: androidTestFile
            downloadPath: '$(System.ArtifactsDirectory)'     

        - task: DownloadSecureFile@1
          name: localprop
          displayName: Download local properties file
          inputs:
            secureFile: 'local.properties'

        - task: DownloadSecureFile@1
          name: keyprop
          displayName: Download key properties file
          inputs:
            secureFile: 'key.properties'

        - task: DownloadSecureFile@1
          name: key
          displayName: Download signing key
          inputs:
            secureFile: 'ezrxplusuat.jks'

        - task: Bash@3
          displayName: Copy config files
          inputs:
            targetType: 'inline'
            script: |
              cp $(localprop.secureFilePath) $(Build.SourcesDirectory)/android/local.properties
              cp $(keyprop.secureFilePath) $(Build.SourcesDirectory)/android/key.properties
              cp $(key.secureFilePath) $(Build.SourcesDirectory)/android/app/ezrxkey.jks
          
              echo "local.properties copied to $(Build.SourcesDirectory)/android/local.properties"
              echo "key.properties copied to $(Build.SourcesDirectory)/android/key.properties"
              echo "key.jks copied to $(Build.SourcesDirectory)/android/app/ezrxkey.jks"
          
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              test_file=$(find integration_test/${{ parameters.region }}/ -type f -regextype posix-awk -regex '.*\.dart' | grep ${{ testFile.Key }} )
              pushd android	 
              source /etc/profile.d/gradle.sh
              flutter pub get 
              gradle wrapper
              ./gradlew app:assembleUatDebug -Ptarget="$(Build.SourcesDirectory)/$test_file"

              build_status=$(echo $?)
              if [ "$build_status" == 0 ]
              then
                echo "Build Done"
              else
                echo "Some Build Failed."
                exit 1
              fi
              popd
          displayName: Build Test Suite    

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              BROWSERSTACK_CREDENTIALS=$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESSKEY

              test_file=${{ testFile.Key }}
              region=${{ parameters.region }}
              testSuite=("integration_test/$region/$test_file.dart" "${region^^}")
              
              echo "Testcase:" "${testSuite[0]}"
              echo "GeoLocation:" "$region"
              echo "Using device:" "${{ parameters.device_name }}"

              check_parallel (){
                random_number=$((1 + RANDOM % 30))
                sleep $random_number
                check_parallel="curl -k -u $BROWSERSTACK_CREDENTIALS -X GET "https://api-cloud.browserstack.com/app-automate/plan.json" "
                parallel_res=`$check_parallel`
                parallel_in_use=$(echo $parallel_res | jq '.parallel_sessions_running' )
                max_parallel=$(echo $parallel_res | jq '.parallel_sessions_max_allowed' )
                echo "We currently used all the parallel: $parallel_in_use / $max_parallel"
              }
              check_parallel

              while  [ "$parallel_in_use" -eq "$max_parallel" ]; do echo "We currently used all the parallel: $parallel_in_use / $max_parallel, will sleep 30s"; sleep 30; check_parallel;  done
              
              echo -e "\n"
              echo 'Uploading the App to Browserstack from $(System.DefaultWorkingDirectory)/build/app/outputs/apk/uat/debug/app-uat-debug.apk :'

              cmd="curl -u $BROWSERSTACK_CREDENTIALS -X POST "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/app" -F "file=@$(System.DefaultWorkingDirectory)/build/app/outputs/apk/uat/debug/app-uat-debug.apk" -F "custom_id=${{ testFile.Key }}""
              app_url=`$cmd | sed -En 's/.*"app_url":"([^"]*).*/\1/p'`
              echo -e "\n"
              echo "app_url : " $app_url

              echo -e "\n"
              echo 'Uploading the test suite to Browserstack from $(System.ArtifactsDirectory)/androidTestFile/app-uat-debug-androidTest.apk :'

              cmd="curl -u $BROWSERSTACK_CREDENTIALS -X POST "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/test-suite" -F "file=@$(System.ArtifactsDirectory)/androidTestFile/app-uat-debug-androidTest.apk" -F "custom_id=${{ testFile.Key }}""
              test_suite_url=`$cmd | sed -En 's/.*"test_suite_url":"([^"]*).*/\1/p'` 
              echo -e "\n"
              echo "test_suite_url : " $test_suite_url

              echo -e "\n"
              echo "Staring the Test execution on Browserstack :"

              val=""
              if [ $IS_GEOLOCATION_ENABLED == 'Yes' ]
              then
                val=$(curl -X POST 'https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build' \
                --header 'Content-Type: application/json' \
                -u $BROWSERSTACK_CREDENTIALS \
                -d '{"app": "'"$app_url"'", "testSuite": "'"$test_suite_url"'", "geoLocation":"'"${testSuite[1]}}"'" , "buildTag": "'"$testSuite[0]"'", "project":"eZRxPlus", "autoGrantPermissions":"true", "deviceLogs":"true", "networkLogs":"true", "devices": ["'"${{ parameters.device_name }}"'"]}' )
              else
                val=$(curl -X POST 'https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build' \
                --header 'Content-Type: application/json' \
                -u $BROWSERSTACK_CREDENTIALS \
                -d '{"app": "'"$app_url"'", "testSuite": "'"$test_suite_url"'", "buildTag": "'"$testSuite[0]"'", "project":"eZRxPlus", "autoGrantPermissions":"true", "deviceLogs":"true", "networkLogs":"true",  "devices": ["'"${{ parameters.device_name }}"'"]}' )
              fi

              result_build_id=$(echo $val | sed 's/{.*"build_id":"*\([0-9a-zA-Z]*\)"*,*.*}/\1/')
              
              echo "Build_Id : " $result_build_id

              while echo "$result_build_id" | grep -q "BROWSERSTACK_ALL_PARALLELS_IN_USE"; do
                val=""
                if [ $IS_GEOLOCATION_ENABLED == 'Yes' ]
                then
                  val=$(curl -X POST 'https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build' \
                  --header 'Content-Type: application/json' \
                  -u $BROWSERSTACK_CREDENTIALS \
                  -d '{"app": "'"$app_url"'", "testSuite": "'"$test_suite_url"'", "geoLocation":"'"${testSuite[1]}}"'" , "buildTag": "'"$testSuite[0]"'", "project":"eZRxPlus", "autoGrantPermissions":"true", "deviceLogs":"true", "networkLogs":"true", "devices": ["'"${{ parameters.device_name }}"'"]}' )
                else
                  val=$(curl -X POST 'https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/build' \
                  --header 'Content-Type: application/json' \
                  -u $BROWSERSTACK_CREDENTIALS \
                  -d '{"app": "'"$app_url"'", "testSuite": "'"$test_suite_url"'", "buildTag": "'"$testSuite[0]"'", "project":"eZRxPlus", "autoGrantPermissions":"true", "deviceLogs":"true", "networkLogs":"true",  "devices": ["'"${{ parameters.device_name }}"'"]}' )
                fi
                result_build_id=$(echo $val | sed 's/{.*"build_id":"*\([0-9a-zA-Z]*\)"*,*.*}/\1/')
                echo "Build_Id : " $result_build_id                  
                sleep 30 
              done
              
              buildStatus="running"
              buildMonitorStart=$SECONDS
              maxTime=${{ parameters.max_test_time }} # Max test time should not be above 5 minutes. (Yet apply, if want to do this please use ENV Param instead)

              while [ "$buildStatus" == "running" ];
              do
                cmd="curl -X GET "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/builds/${result_build_id}" -u $BROWSERSTACK_CREDENTIALS "
                buildStatus=`$cmd | sed -En 's/.*"status":"([^"]*).*/\1/p'`
                sessionId=`$cmd | sed -En 's/.*"id":"([^"]*).*/\1/p'`
                echo "The Current status of the run is : " $buildStatus
                echo "The Session Id of the run is : " $sessionId
                monitorTime=$(( SECONDS - buildMonitorStart ))
                echo "Monitor Time : " $monitorTime
                echo "Max Time : " $maxTime
                if [ $monitorTime -gt $maxTime  ]
                then	
                  buildStatus="error"
                fi
              done
              buildDetails=https://app-automate.browserstack.com/dashboard/v2/builds/"${result_build_id}"

              duration=$(( SECONDS - start ))

              echo -e "\n"
              echo "Summary of the Test Run is as follows: "

              echo "Test case : " ${test_file}

              echo "Build Status : " ${buildStatus}

              echo "Build Details Link : " ${buildDetails}

              echo -e "\n"
              echo "The total time taken for the test execution in seconds is :" $duration                     

              file_without_intergration=$(echo ${test_file} | cut -d '/' -f 2-)
 
              echo "##vso[task.setvariable variable=buildDetails]$buildDetails"   
              echo "##vso[task.setvariable variable=result_build_id]$result_build_id" 
              echo "##vso[task.setvariable variable=file_without_intergration]$file_without_intergration"   

          displayName: Upload App and Test to BrowserStack and wait for result
          env: 
            BROWSERSTACK_USERNAME: '$(BROWSERSTACK_USERNAME)'
            BROWSERSTACK_ACCESSKEY: '$(BROWSERSTACK_ACCESSKEY)'
            ENABLE_GEOLOCATION: '$(ENABLE_GEOLOCATION)'

        - task: AzureCLI@2
          displayName: Edit PushNotification Template
          inputs:
            azureSubscription: 'devops-dd-sc'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |                                          
              BROWSERSTACK_CREDENTIALS=$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESSKEY
              result_build_id=$(result_build_id)
              test_file=$(file_without_intergration)
              buildDetails=$(buildDetails)
              echo $test_file
              total_cases=$(curl -X GET "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/builds/${result_build_id}" -u $BROWSERSTACK_CREDENTIALS | jq '.devices[].sessions[].testcases.count')
              echo "Total Cases: $total_cases"
              passed_cases=$(curl -X GET "https://api-cloud.browserstack.com/app-automate/flutter-integration-tests/v2/android/builds/${result_build_id}" -u $BROWSERSTACK_CREDENTIALS | jq '.devices[].sessions[].testcases.status.passed')
              echo "Total Cases Passed: $passed_cases"

              az storage blob download --container-name devops-operations --file $(System.DefaultWorkingDirectory)/.azure-pipelines/template.html --name ezrxplus-mobile-msteams/template$(Build.BuildId) 

              if [ -n "$total_cases" ] && [ -n "$passed_cases" ]; then
                if [ "$total_cases" -eq "0" ]; then 
                  avg=0
                  echo "set avg: $avg cause Devision Error"
                  sed -i "s|${test_file}_per|${avg}%|g" .azure-pipelines/template.html 
                  sed -i "s|${test_file}_link|$buildDetails|g" .azure-pipelines/template.html 
                else
                  avg=$(python3 -c "print(int(( $passed_cases / $total_cases)*100))")
                  sed -i "s|${test_file}_link|$buildDetails|g" .azure-pipelines/template.html 
                  sed -i "s|${test_file}_per|${avg}%|g" .azure-pipelines/template.html 
                  echo "current avg: $avg"
                fi
              else
                avg=0
                echo "Error! Will set avg = $avg"
                sed -i "s|${test_file}_per|${avg}%|g" .azure-pipelines/template.html 
              fi

              az storage blob upload --connection-string $AZURE_STORAGE_CONNECTION_STRING --container-name devops-operations --overwrite --file $(System.DefaultWorkingDirectory)/.azure-pipelines/template.html --name ezrxplus-mobile-msteams/template$(Build.BuildId)
              cat .azure-pipelines/template.html
          env: 
            AZURE_STORAGE_CONNECTION_STRING: '$(AZURE_STORAGE_CONNECTION_STRING)'
            BROWSERSTACK_USERNAME: '$(BROWSERSTACK_USERNAME)'
            BROWSERSTACK_ACCESSKEY: '$(BROWSERSTACK_ACCESSKEY)'
            ENABLE_GEOLOCATION: '$(ENABLE_GEOLOCATION)'

        - task: Bash@3
          displayName: Read Integration Test Report
          inputs:
            targetType: 'inline'       
            script: |
              w3m -dump .azure-pipelines/template.html

- stage: MSTeamsNotificationStage
  dependsOn: [AndroidUATRegressionJob]
  displayName: MSTeams Notification Stage
  condition: succeeded()  
  jobs:
  - job: MSTeamsNotificationUatJob
    displayName: MSTeamsNotificationUatJob
    steps:  
    - task: AzureCLI@2
      displayName: Edit PushNotification Template
      inputs:
        azureSubscription: 'devops-dd-sc'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage blob download --container-name devops-operations --file $(System.DefaultWorkingDirectory)/.azure-pipelines/template.html --name ezrxplus-mobile-msteams/template$(Build.BuildId) 
          region=${{ parameters.region }}
          sed -E -i "s|region|$region|g" ./.azure-pipelines/template.html           
          sed -E -i "s|<a.*_per|NA|g" ./.azure-pipelines/template.html
          w3m -dump .azure-pipelines/template.html   

    - task: Bash@3
      displayName: Define Template Notification
      inputs:
        targetType: 'inline'
        script: |
          regions=( ${{ parameters.region }} )
          for region in ${regions[@]}
          do
            avg=$(grep -Eo "${region}.*[0-9]+%" .azure-pipelines/template.html | grep -Eo '[0-9]+%' | grep -Eo '[0-9]+')
            len=$(grep -Eco "${region}.*[0-9]+%" .azure-pipelines/template.html)
            echo $(echo $region: ${avg[@]})
            if [ "$len" == 0 ]; then 
              echo "Ignore"
            else
              sum=0
              for i in ${avg[@]}; do
                sum=$((sum + i ))
              done
              average=$((sum / len))
              echo "${region}_avg: $average"
              sed -i "s|${region}_avg|${average}%|g" ./.azure-pipelines/template.html
            fi
          done
        
          sed -E -i "s|>.*_avg|>NA|g" ./.azure-pipelines/template.html
          buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
          username="$(Build.RequestedFor)"
          build_id="$(Build.BuildId)"
          branch_name="$(Build.SourceBranchName)"      
          sed -E -i "s|build_url_link|$buildUrl|g" ./.azure-pipelines/template.html
          sed -E -i "s|user_name|$username|g" ./.azure-pipelines/template.html
          sed -E -i "s|build_id|$build_id|g" ./.azure-pipelines/template.html
          sed -E -i "s|branch_name|$branch_name|g" ./.azure-pipelines/template.html                  
          sed -E -i "s|build_time|$build_time|g" ./.azure-pipelines/template.html                  

          cat .azure-pipelines/template.html

    - task: Bash@3
      displayName: Push Notification
      inputs:
        targetType: 'inline'
        script: |
          html=$(tr -d '\n' < ./.azure-pipelines/template.html)
          curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"$html\"}" $MICROSOFT_TEAMS_BUILD_CHANNEL
      env:
        MICROSOFT_TEAMS_BUILD_CHANNEL: '$(MICROSOFT_TEAMS_BUILD_CHANNEL)'

- stage: MSTeamsFailedNotificationStage
  dependsOn: [AndroidUATRegressionJob]
  displayName: MSTeams Failed Notification Stage
  condition: failed()
  jobs:
  - job: MSTeamsFailedNotificationUatJob
    displayName: MSTeams Failed Notification 
    steps:  
    - task: Bash@3
      displayName: Push Notification When Failed
      inputs:
        targetType: 'inline'
        script: |
          buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"      
          username="$(Build.RequestedFor)"
          build_id="$(Build.BuildId)"
          branch_name="$(Build.SourceBranchName)"
          TITLE="Integration For ${{ parameters.region }} Triggered By $username on $branch_name Fail"

          curl --location --request POST '$(MICROSOFT_TEAMS_BUILD_CHANNEL)' \
          --header 'Content-Type: text/plain' \
          --data-raw '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "Integration For ${{ parameters.region }} Fail",
            "sections": [{
              "activityTitle": "'"$TITLE"'",
                "markdown": true
              }],
            "potentialAction": [{
              "@type": "ActionCard",
              "name": "Build url",
              "actions": [{
                "@type": "OpenUri",
                "name": "Pipeline Fail",
                "targets": [
                  { "os": "default", "uri": "'"$buildUrl"'" }
                ]
              }]
            }]
          }'  
      env:
        MICROSOFT_TEAMS_BUILD_CHANNEL: '$(MICROSOFT_TEAMS_BUILD_CHANNEL)'          
